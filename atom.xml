<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zy080080.github.io/</id>
    <title>听故事的人</title>
    <updated>2020-10-13T23:33:38.085Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zy080080.github.io/"/>
    <link rel="self" href="https://zy080080.github.io/atom.xml"/>
    <subtitle>天青色等烟雨，而我在等你</subtitle>
    <logo>https://zy080080.github.io/images/avatar.png</logo>
    <icon>https://zy080080.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 听故事的人</rights>
    <entry>
        <title type="html"><![CDATA[コンパイラ：字句解析]]></title>
        <id>https://zy080080.github.io/post/u0YDg1pii/</id>
        <link href="https://zy080080.github.io/post/u0YDg1pii/">
        </link>
        <updated>2020-10-10T05:35:39.000Z</updated>
        <summary type="html"><![CDATA[<p>コンパイラが行う最初の処理が字句解析である。字句解析では，文字の並びを解析し，トークンの並びへ変換する作業をする。</p>
]]></summary>
        <content type="html"><![CDATA[<p>コンパイラが行う最初の処理が字句解析である。字句解析では，文字の並びを解析し，トークンの並びへ変換する作業をする。</p>
<!-- more -->
<h2 id="トークン">トークン</h2>
<p>ソースプログラムを構成する単位は，文字である。この文字を一文字以上集めて，“単語”に相当する単位にしたものがトークンである。</p>
<p>コンパイラは構文解析を行う前に，文字の並びをトークンの並びに分解する。これは，構文解析をやりやすくするためや，処理方式に違いがあることなどから，一般的に行われるものである。</p>
<p>トークンの並びに変換する作業を，文字の列を句（トークン）の列に分解する作業であることから，**字句解析（Lexical Analasis）**と呼ぶ。</p>
<h2 id="トークンの種類">トークンの種類</h2>
<h3 id="識別子とキーワード">識別子とキーワード</h3>
<p>識別子は，通常の変数名や関数名のような名前を意味する。しかし，変数名か関数名かといった区別は，字句解析では判断できないため，予約語を除き，全て識別子という区分で扱うことになる。</p>
<p>通常のプログラミング言語では，‘if’や‘while’のような単語を，キーワードあるいは予約語（reserved word）として特別に扱っている。</p>
<p>このキーワードは，２つのグループに分けられる。<br>
１つは，ifやwhileのように，プログラムの構造を示すものであり，他のものに定義をされると解析が困難になるため，予約されている。<br>
もう１つは，intやfloatのように，特別なデータ型を表すもので，他のものに定義されても解析上は支障がないが，意味などで混乱を起こす可能性があるため，他の定義が禁止されている。</p>
<h3 id="定数">定数</h3>
<p>（1）整数<br>
コンパイラ内部で扱う時に，整数のオーバーフローが起きてはいけない。</p>
<p>（2）浮動小数点数<br>
3.2や0.25のほか，3.5e2や2e-4も浮動小数点数である。さらに，eの前後に空白を許すか許さないか，といった書き方の違いもあり，これらをか使うプログラミング言語に応じて正しく認識する必要がある。また，誤差の問題も注意が必要である。</p>
<p>（3）文字と文字列<br>
エスケープ文字（C言語の「\」）の扱いを必要とする。また，文字列と文字が異なるのかどうかの違いがある。<br>
C言語では，'a'は文字で，&quot;a&quot;は文字列となる。ところが，Pascalでは'a'は文字で，'ab'が文字列である。そして，文字として'を含める時にどのように記載するかは言語によって違っている。</p>
<h3 id="空白改行注釈">空白，改行，注釈</h3>
<p>空白や改行は，C言語では，トークンの区切りという意味だけを持っている。<br>
注釈は一般にプログラムを構成する要素ではない。<br>
通常のプログラミング言語では，１つのトークンの間に注釈や空白を入れることはできない。</p>
<h2 id="字句解析の手法">字句解析の手法</h2>
<p>字句解析の処理は，入力文字に対する遷移図（オートマトン）と考えると比較的わかりやすい。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[コンパイラ：プログラムが動作する仕組みと言語が動作する仕組み]]></title>
        <id>https://zy080080.github.io/post/a4vitZ301/</id>
        <link href="https://zy080080.github.io/post/a4vitZ301/">
        </link>
        <updated>2020-10-03T04:06:13.000Z</updated>
        <summary type="html"><![CDATA[<p>コンパイラの役割はプログラミング言語を用いて開発するソフトウェア，つまり人が記述したテキストをコンピュータが解釈，実行できる機械語に変換することである。<br>
ここでは，コンパイラの目的を理解するために，コンピュータ上でソフトウェアが動作する基本的な仕組みと，プログラミング言語として定義された文法，さらに，この文法にしたがって開発するソフトウェアの目的を説明する。</p>
]]></summary>
        <content type="html"><![CDATA[<p>コンパイラの役割はプログラミング言語を用いて開発するソフトウェア，つまり人が記述したテキストをコンピュータが解釈，実行できる機械語に変換することである。<br>
ここでは，コンパイラの目的を理解するために，コンピュータ上でソフトウェアが動作する基本的な仕組みと，プログラミング言語として定義された文法，さらに，この文法にしたがって開発するソフトウェアの目的を説明する。</p>
<!-- more -->
<h2 id="コンピュータの仕組み">コンピュータの仕組み</h2>
<p>基本的な構成要素は，頭脳となるCPUと情報を記憶するメモリである。<br>
CPUはメモリに記録されているプログラムを制御装置に読み出して分析，解釈し，演算装置が，その意味を理解しながら実行する。<br>
CPUは人が支持する人間の言葉を直接的に理解できないため，プログラムとして記述された指示書を読みながら実行することになる。この指示書を記述する文法がプログラミング言語である。コンピュータが理解できる言語は，CPUとメモリが連携して行う計算処理の手順を定義できなければならない。<br>
ここで注意すべき点は，<strong>現在のコンピュータは定義されていないことや矛盾する手順を人間のように自動的に発見して補正する能力も知識もない</strong>ことである。</p>
<p>CPU内部にも，計算に用いる数値を格納するレジスタと呼ばれる一種の記憶装置を保持している。計算を行う演算装置は，このレジスタに記録されている数値を読み取り，また一時的な計算結果を書き出しながら計算を実行していく。レジスタは演算装置とのやりとりを高速に行えるが，利用できる数は限定的である。<br>
この構成からCPUの計算速度が向上する，つまりコンピュータ性能が高くなるためには，まず演算装置が高速に計算できること，加えてレジスタへの読み込み，書き込みが高速にできること，さらに一度にレジスタに読み込める情報量を大きくすることが必要になる。</p>
<p>計算手順と計算に用いる情報を定義しているプログラムは，実行する前にはハードディスクなどに格納されている。利用者がプログラムの起動をコンピュータに指示すると，プログラムがメモリに記録（ロード）される。そして，CPUは記憶装置から，順次，計算単位を一時的に内部記憶装置に読み込みながら，このデータに対して計算を加えて，結果を記憶装置に登録する手順を繰り返す。以上の操作により，利用者は最終的に期待する計算結果を得ることができる。</p>
<h2 id="言語が動作する仕組み">言語が動作する仕組み</h2>
<ul>
<li>自然言語（Natural Language）
<ul>
<li>自然発生的にできた言語。日本語，英語が該当する。</li>
</ul>
</li>
<li>人工言語（Artificial Language）
<ul>
<li>ある情報を伝える目的のために人が作り出した言語。モールス信号やプログラミング言語が該当する。</li>
</ul>
</li>
</ul>
<p>人工言語であるプログラミング言語は自然言語と異なり，コンピュータが解釈して実行できるように人が設計した言語であるため，その解釈は厳密的に行われなければならず，曖昧な表現は許されない。</p>
<p>コンピュータには通常，あらかじめ定義されている一通りの意味でしか解釈できない。このように人工言語に属するプログラミング言語は，自然言語と比較して目的が限定的であり，かつ表現力に乏しい言語といえる。</p>
<h3 id="プログラミング言語と機械語">プログラミング言語と機械語</h3>
<figure data-type="image" tabindex="1"><img src="https://zy080080.github.io//post-images/1601697611773.png" alt="" loading="lazy"></figure>
<p>プログラミング言語は，人が目的に応じてアルゴリズムを記述しやすいように開発された人工言語であるため，プログラムをCPUが理解できる機械語で表現されるコードに置き換えて解釈する仕組みが必要となる。</p>
<p>この変換を行うツールとして，コンパイラー，インタプリタ，クロスコンパイラなどの処理形態がある。</p>
<p>機械語プログラムは起動するために必要な初期情報を格納したスタートアップルーチンと呼ばれる情報を持ち，<strong>コンピュータの仕組みに対応して</strong>命令群とデータ群を保持している。<br>
コンピュータに動作させたい手順は，スタートアップルーチンを呼び出したのち，命令群とデータ群による計算を繰り返すことにより実行される。<br>
このため，コンパイラがプログラムを機械語に変換してアルゴリズムを実行させるためには，コンピュータの仕組みを強く意識することが重要である。</p>
<figure data-type="image" tabindex="2"><img src="https://zy080080.github.io//post-images/1601698151224.png" alt="" loading="lazy"></figure>
<p>コンパイラを設計する際に行われる検討項目を以下に示す。これらの検討は，プログラムから機械語への変換を効率よく行うとともに，コンピュータ性能を十分に生かすことが可能な機械語コードを生成するために行う。</p>
<ul>
<li>木（解析木など）や中間言語（アセンブラ）など言語の構造の整理</li>
<li>生成する機械語の構造</li>
<li>プログラムの構造や意味に対応した字句，構文，意味解析</li>
<li>機械語コードの生成と最適化</li>
<li>コンパイラやインタプリタ，プリプロセッサ，マクロなど，言語処理の形態</li>
<li>プートストラップ，コンパイラの自動生成，コンパイラ作成などのツール利用</li>
</ul>
<h2 id="言語を動作させる工夫">言語を動作させる工夫</h2>
<p>コンピュータのCPuに依存する言語を，一般に低レベル言語と呼ぶ。これに対して手続き型言語，関数型言語，論理型言語，オブジェクト指向型言語など，プログラムとして表現したい意味に依存して設計された言語は，特定のCPU種別に依存することなく独立に開発されるため，高レベル言語と呼ばれる。</p>
<hr>
<h2 id="コンパイラ">コンパイラ</h2>
<p>コンパイラは高級言語で書かれたプログラムをそれと等価な機械語プログラム等に変換する言語処理系（Language Processing System）である。</p>
<h2 id="言語処理系">言語処理系</h2>
<p>あるプログラミング言語で書かれたプログラムを，同じ動作をする別のプログラミング言語のプログラムに変換するソフトウェアを言語処理系という。</p>
<p>変更前のプログラム＝ソース ，その言語＝ソース言語<br>
変更後のプログラム＝オブジェクト，その言語＝オブジェクト言語（目的言語）</p>
<p>Cコンパイラ（言語処理系）<br>
ソース言語＝C言語，目的言語＝アセンブリ言語</p>
<p>アセンブラ（言語処理系）<br>
ソース言語＝アセンブリ言語，目的言語＝機械語</p>
<h2 id="リンカ">リンカ</h2>
<p>オブジェクトファイルとライブラリを結合し，動作可能な実行形式プログラムを出力。</p>
<h2 id="プリプロセッサ">プリプロセッサ</h2>
<p>ソースプログラムをコンパイル可能な形に整える。ヘッダーファイルの取り込み，マクロ展開（#defineなど）</p>
<h2 id="分割コンパイル">分割コンパイル</h2>
<p>システム開発は，通常複数人のチームで行う。<br>
そのため，一般的ににプログラムは複数のソースプログラムによって構成される。</p>
<ul>
<li>各ソースプログラムを個別にコンパイルして結合することを<strong>分割コンパイル</strong>という。</li>
<li>個別にコンパイルしたオブジェクトファイルの結合は，リンカーが行う。</li>
<li>各ソースプログラムは完全ではないため，Cコードと呼ぶことがある。</li>
</ul>
<h2 id="コンパイラの構造">コンパイラの構造</h2>
<p>コンパイラの本体は，以下の４つの処理で構成される。</p>
<ol>
<li>字句解析（Lexical Analysis）ソースプログラムのテキストを，字句要素（lexeme）と呼ばれる文字列に分割する。</li>
<li>構文解析（Syntax Analysis）トークン列を解析して文法にしたがっているかを確認し，構文木を生成する。</li>
<li>意味解析（Semantic Analysis）意味の観点でプログラムの正しさを確認する。</li>
<li>コード生成（Code Generation）アセンブリ言語のコードを生成する。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spring Frameworkの特徴と役割]]></title>
        <id>https://zy080080.github.io/post/7zzNKr8JI/</id>
        <link href="https://zy080080.github.io/post/7zzNKr8JI/">
        </link>
        <updated>2020-09-29T13:07:33.000Z</updated>
        <summary type="html"><![CDATA[<p>アプリケーションやシステム開発においては，開発効率を向上させるためにフレームワークを使用する企業は少なくありません。<br>
Javaの開発環境でよく使用されるフレームワークはSpring Framework。</p>
]]></summary>
        <content type="html"><![CDATA[<p>アプリケーションやシステム開発においては，開発効率を向上させるためにフレームワークを使用する企業は少なくありません。<br>
Javaの開発環境でよく使用されるフレームワークはSpring Framework。</p>
<!-- more -->
<h2 id="従来のwebアプリケーションの問題点">従来のWebアプリケーションの問題点</h2>
<p>一般的に，JavaのWebアプリケーションでは，レイヤー構造を採用します。</p>
<table>
<thead>
<tr>
<th>レイヤー</th>
<th>役割</th>
</tr>
</thead>
<tbody>
<tr>
<td>プレゼンテーション・レイヤー</td>
<td>クライアントの画面表示や画面からの入力を受け付ける</td>
</tr>
<tr>
<td>ビジネス・レイヤー</td>
<td>業務処理を行う</td>
</tr>
<tr>
<td>データアクセス・レイヤー</td>
<td>データベースなどのリソースにアクセスする</td>
</tr>
</tbody>
</table>
<p>Webアプリケーションは，レイヤーによって論理的に分割され，各レイヤーでは様々なフレームワークを使用して効率的に開発を行います。<br>
例えば，プレゼンテーション・レイヤーにはStruts，データアクセス・レイヤーにはHibernateを使うといった具合です。</p>
<p>このように各レイヤーごとに，フレームワークを適用して開発する方式はかなり一般的になりましたが，実際にプログラムを作っていく上で，いくつかの問題が出てきました。</p>
<h3 id="変更に弱い">変更に弱い</h3>
<figure data-type="image" tabindex="1"><img src="https://zy080080.github.io//post-images/1601360542249.jpg" alt="" loading="lazy"></figure>
<p>各レイヤーは一見独立しているように見えるのですが，実際のところ，隣り合うレイヤーは密接に連結しています。例えば，ビジネス・レイヤーからデータアクセス・レイヤーのオブジェクトにアクセスする場合，通常は以下のようなプログラムになるでしょう。</p>
<pre><code>DataAccessObject dao = new DataAccessObject();
</code></pre>
<p>これは，データアクセス・レイヤー（DataAccessObjectメソッドなど）に変更があった場合，呼び出し元のビジネス・レイヤーにも変更が発生することを意味しています。できるならば，データアクセス・レイヤーの変更だけに留めたいものです。</p>
<h3 id="単体テストが困難">単体テストが困難</h3>
<p>レイヤー同士が密接に連結している場合，単体テストが困難になります。例えば，ビジネス・レイヤーの単体テストをする場合，しぞんしているレイヤーの環境，つまり，データアクセス・レイヤーの実装とデータベース環境が必要となります。ビジネス・レイヤーのテストをしたいだけなのに，わざわざデータベースを用意してテストデータを投入するというのは面倒です。</p>
<p>また，複数のレイヤーをまとめてテストすると，エラーが発生した時に何が原因でエラーになったのか，切り分けの手間が増えます。可能ならば，ビジネス・レイヤー単体で試験したいものです。</p>
<h3 id="トランザクションコードが散在">トランザクション・コードが散在</h3>
<p>データベースにアクセスするアプリケーションでは，データベースのトランザクションを処理するコードがプレゼンテーション・レイヤーやビジネス・レイヤーに散在します。プログラムのメンテナンスのしやすさや再利用性を考えると，トランザクション・コードは分離して，まとめて管理したいところです。</p>
<figure data-type="image" tabindex="2"><img src="https://docs.spring.io/spring-framework/docs/4.3.x/spring-framework-reference/html/images/spring-overview.png" alt="" loading="lazy"></figure>
<h2 id="spring-frameworkの特徴">Spring Frameworkの特徴</h2>
<p>Spring Frameworkの特徴として，AOPとDiと呼ばれる概念で構築されていること，専用のテストプログラムがあることなどが挙げられます。</p>
<h3 id="diにより変更がしやすい">DIにより変更がしやすい</h3>
<p>Dependency Injection，依存性の注入と言います。<br>
DIを重視した設計になっていると，依存性のあるプログラムを外部から取り入れできるようになります。<br>
オブジェクトを注入することより，クラスの依存関係が解消され，動作のテストを行えるようになります。結果として，１つひとつのプログラムを独立させやすくなり，システム開発や改修が楽になるのです。</p>
<h3 id="aopによりメンテナンスがしやすい">AOPによりメンテナンスがしやすい</h3>
<p>AOPとは，Aspect Orientation Programmingの略で，アスペクト指向プログラミングと言います。<br>
システム内で行われる同じ処理（共通処理）を抽出して集約をするプログラミング手法で，プログラムをシンプルにまとめることができます。コードを短くわかりやすくすることで，不具合の特定が容易になるほか，プログラムの修正も行いやすくなります。</p>
<h3 id="開発に役立つテストプログラムがある">開発に役立つテストプログラムがある</h3>
<p>１つひとつのシステムを統合した際のバグ検出ができる専用テストプトグラムがあります。開発したシステムが問題なく処理できるかを事前にチェックすることで，バグを最小限に抑えられるようになります。</p>
<p>参照：<br>
<a href="https://hnavi.co.jp/knowledge/blog/spring-framework/">https://hnavi.co.jp/knowledge/blog/spring-framework/</a><br>
<a href="https://xtech.nikkei.com/it/article/COLUMN/20070710/277218/">https://xtech.nikkei.com/it/article/COLUMN/20070710/277218/</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git：分散型バージョン管理〜チーム開発　メモ]]></title>
        <id>https://zy080080.github.io/post/l0qMHfM-n/</id>
        <link href="https://zy080080.github.io/post/l0qMHfM-n/">
        </link>
        <updated>2020-09-29T05:17:27.000Z</updated>
        <summary type="html"><![CDATA[<p>ブランチによるチーム開発はGitの特徴であり，Gitが多くの開発者に支持される理由となる機能である。</p>
]]></summary>
        <content type="html"><![CDATA[<p>ブランチによるチーム開発はGitの特徴であり，Gitが多くの開発者に支持される理由となる機能である。</p>
<!-- more -->
<h2 id="中央リポジトリをクローン">中央リポジトリをクローン</h2>
<pre><code>git clone https://openg.tracpath.com/git/project project
</code></pre>
<p>git cloneコマンドで「project」中央リポジトリからローカルリポジトリを作成した。</p>
<h2 id="オーカルリポジトリから中央リポジトリにプッシュ">オーカルリポジトリから中央リポジトリにプッシュ</h2>
<pre><code>git push
</code></pre>
<h2 id="プルの使い方">プルの使い方</h2>
<p>git pullコマンドは，中央リポジトリの最新情報を取得し(git fetch)，自分の作業ディレクトリと統合(git merge)することを意味している。</p>
<p>pullの操作を行うタイミング：</p>
<ul>
<li>開発作業を開始する前に</li>
<li>作業が完了し，pushする前にpull操作を行う</li>
</ul>
<h3 id="中央リポジトリの情報を知る">中央リポジトリの情報を知る</h3>
<pre><code>git remote -v
</code></pre>
<h3 id="pushの使い方">pushの使い方</h3>
<pre><code>git push [romote-name] [branch-name]
</code></pre>
<h2 id="ブランチ">ブランチ</h2>
<p>同時対応が可能なブランチを利用することで，</p>
<ul>
<li>同時に異なる目的の作業を進めることが可能</li>
<li>ブランチはお互いに影響しないため，独立したソースコードとして管理が可能</li>
<li>ブランチでの作業は他のメンバーに影響を与えない</li>
<li>ブランチの作成，マージが簡単に可能</li>
<li>修正内容を戻したり，なかったことにすぐにできる</li>
</ul>
<p>というメリットがある</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>説明</th>
</tr>
</thead>
<tbody>
<tr>
<td>git branch [branch-name]</td>
<td>ブランチを作成する</td>
</tr>
<tr>
<td>git branch -vva</td>
<td>ブランチ一覧を確認する</td>
</tr>
<tr>
<td>git checkout branchName</td>
<td>ブランチを切り替える</td>
</tr>
<tr>
<td>git merge master</td>
<td>ブランチをmasterブランチにマージする</td>
</tr>
<tr>
<td>git branch -d [branch-name]</td>
<td>ブランチを削除する</td>
</tr>
</tbody>
</table>
<h3 id="マージを理解する">マージを理解する</h3>
<p>マージは枝分かれしたブランチを1つに統合することをいう。</p>
<p>コミットされ版を重ねたブランチに対して行うマージ処理は，次の２つを意味している。</p>
<ol>
<li>同一のファイルに行われた変更を統合する</li>
<li>コミットに含まれるファイル全体を統合する</li>
</ol>
<h2 id="タグの使い方">タグの使い方</h2>
<p>タグとは，特定のバージョンに対して目印となるポイントをつけることである。<br>
例えば，Webアプリケーションのリリースした時点のバージョンをタグ名「v.1.0」としたり，受託開発でお客様に納品した時点のバージョンをタグ名「yyyy-mm-dd」と利用する。</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>説明</th>
</tr>
</thead>
<tbody>
<tr>
<td>git tag [tag-name]</td>
<td>タグを作成する</td>
</tr>
<tr>
<td>git tag</td>
<td>タグの一覧を確認する</td>
</tr>
<tr>
<td>git tag -d [tag-name]</td>
<td>タグを削除する</td>
</tr>
<tr>
<td>git push origin [tag-name]</td>
<td>作成したタグを中央リポジトリにプッシュする</td>
</tr>
<tr>
<td>git push origin :tagname</td>
<td>リモートのタグを削除する</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git：分散型バージョン管理〜Gitの基本　メモ]]></title>
        <id>https://zy080080.github.io/post/BtnRgcd13/</id>
        <link href="https://zy080080.github.io/post/BtnRgcd13/">
        </link>
        <updated>2020-09-24T12:57:22.000Z</updated>
        <summary type="html"><![CDATA[<p>分散型バージョン管理は，個々の開発者ごとに複数のリポジトリを持つことができ，開発の形態や規模に応じて柔軟な開発ができる。</p>
]]></summary>
        <content type="html"><![CDATA[<p>分散型バージョン管理は，個々の開発者ごとに複数のリポジトリを持つことができ，開発の形態や規模に応じて柔軟な開発ができる。</p>
<!-- more -->
<h1 id="git">Git</h1>
<p>これはGitを勉強する際に大切なことや忘れやすいことをまとめた文章である。</p>
<h2 id="gitの仕組み">Gitの仕組み</h2>
<ul>
<li>Gitがスナップショットとしてデータを記録している。その理由は，Gitが持つブランチ機能を使った開発でその力を発揮することができるからである。</li>
<li>ローカルリポジトリを持つため，全ての操作をローカルで完結できます（リモートリポジトリにアクセスする必要がない）。</li>
<li>ローカルリポジトリは自分専用のリポジトリとしてブランチの作成やコミットが可能。</li>
<li>障害が発生し，ローカルリポジトリを失った場合に別のリポジトリから復元が可能。</li>
<li>スポードと大規模プロジェクトでも効率の高い開発が可能。</li>
</ul>
<h2 id="gitの初期設定">Gitの初期設定</h2>
<p>チームで共有するためにユーザー情報が必要となる。</p>
<pre><code>開発者の名前を設定
git config --global user.name &quot;new username&quot;
開発者のメールアドレスを設定
git config --global user.email &quot;user@email.com&quot;
ユーザー名とパスワードのキャッシュを有効にする
git config --global credential helper osxkeychain
git config --global credential helper wincred
git statusなどで日本語ファイル名をエスケープせずに表示する
git config --global core.quotepath false
</code></pre>
<h2 id="gitの三つの状態">Gitの三つの状態</h2>
<ol>
<li>変更がない状態</li>
<li>変更済み：<br>
作業コピーのファイルに変更を加えたり，ファイルを新規作成したりした状態のこと。自分の作業コピー内で修正中、または修正を完了していても，ローカルリポジトリにコミット対象であることを示すマークをつけていない。</li>
<li>ステージ済み状態<br>
バージョン管理対象のファイルが追跡され，マークされた状態。またローカルリポジトリにコミットされていないことを意味する。</li>
</ol>
<h2 id="リポジトリをクローン作成する">リポジトリをクローン/作成する</h2>
<p>作成：<br>
ローカルリポジトリのフォルダを作成し，</p>
<pre><code>git init
</code></pre>
<p>を実行する。</p>
<p>クローン：<br>
git initでリポジトリを準備し，</p>
<pre><code>git clone https://username@domain/path/to/repository
</code></pre>
<p>を実行する。</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>説明</th>
</tr>
</thead>
<tbody>
<tr>
<td>git status</td>
<td>作業コピー状態を表示</td>
</tr>
<tr>
<td>git add fileName</td>
<td>新しいファイルをコミット対象としてステージ済みに登録</td>
</tr>
<tr>
<td>git add .</td>
<td>複数のファイルを一度にステージ済みに登録</td>
</tr>
<tr>
<td>git commit -m &quot;message&quot;</td>
<td>変更をコミットする</td>
</tr>
<tr>
<td>git rm fileName</td>
<td>ファイルの削除を実行し，ステージ済みにする</td>
</tr>
<tr>
<td>git mv fileName newFileName</td>
<td>ファイルの名前を変更</td>
</tr>
</tbody>
</table>
<h3 id="コミットメッセージは将来のチームと自分のため">コミットメッセージは将来のチームと自分のため</h3>
<p>コミット時に，-mオプションを付けない場合，コミットメッセージを入力するために，エディターが起動する。<br>
コミットメッセいーじには，そのコミットを説明する内容を記述するようにすべきである。機能追加なのか，バグ対応なのか。。。<br>
人間の記憶は曖昧のため，コミット時のメッセージをできるだけ詳しく記録することが大切。</p>
<p>良い例：<br>
HTTP/2に対応するライブラリを追加<br>
ヘッダーを共通化した（ref　#143）<br>
起動時にクラッシュするバグに対応</p>
<h2 id="ファイルの削除移動と名前変更">ファイルの削除，移動と名前変更</h2>
<p>git rmコマンドは，ファイルの削除を実行して，<strong>ステージングに登録した状態「ステージ済み」にする</strong>。</p>
<pre><code>git rm sample.txt
</code></pre>
<p>ファイルを直接削除した場合も自動で検知する。ただし，自動的に「ステージ済み」にならない。</p>
<p>git mv コマンドはファイル名の変更，ステージング登録を一度に行う便利なコマンドである。</p>
<pre><code>git mv sample.txt newSample.txt
</code></pre>
<h2 id="バージョン管理から対象外にする">バージョン管理から対象外にする</h2>
<p>バージョン管理したくてもよいファイル例</p>
<ul>
<li>~や.swpや.bakで終わるファイル
<ul>
<li>Emacs/Vim/Windows系エディタのバックアップファイル</li>
</ul>
</li>
<li>Thumbs.dbやDS_Store
<ul>
<li>WindowsやMacのOSが出力するファイル</li>
</ul>
</li>
<li>~$で始まるファイル
<ul>
<li>Office関係のファイルを開いたときに生成される隠しファイル</li>
</ul>
</li>
</ul>
<h3 id="対象外を定義するgitignoreを作成する">対象外を定義する「.gitignore」を作成する</h3>
<pre><code>echo &quot;.DS_Store&quot; &gt; .gitignore
</code></pre>
<p>.gitignoreの保存場所は，.gitと同じディレクトリを指定する。</p>
<h3 id="gitignoreファイルの書き方">.gitignoreファイルの書き方</h3>
<table>
<thead>
<tr>
<th>書式</th>
<th>説明</th>
</tr>
</thead>
<tbody>
<tr>
<td>#</td>
<td>空行や＃で始まる行はコメントとして扱われる</td>
</tr>
<tr>
<td>sample.txt</td>
<td>ディレクトリに関係なくsample.txtを対象外とする</td>
</tr>
<tr>
<td>/sample.txt</td>
<td>.gitignoreが配置されたディレクトリにあるsample.txtを対象外とする</td>
</tr>
<tr>
<td>folder-a/</td>
<td>ディレクトリ以下の全てを対象外とする</td>
</tr>
<tr>
<td>*.log</td>
<td>ファイルの拡張子が.logのファイルを全て対象外とする</td>
</tr>
<tr>
<td>file-[1-9].html</td>
<td>globパターンに一致するファイルを対象外とする</td>
</tr>
</tbody>
</table>
<h2 id="コミットログ履歴を確認する">コミットログ（履歴）を確認する</h2>
<pre><code>git log
</code></pre>
<p>git logでよく使われるオプション</p>
<table>
<thead>
<tr>
<th>オプション</th>
<th>説明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-p</td>
<td>各コミットのバッチ情報を表示する</td>
</tr>
<tr>
<td>--stat</td>
<td>各コミットで変更されたファイルの統計情報を表示する</td>
</tr>
<tr>
<td>--numstat</td>
<td>ファイル毎の削除や追加された行数を表示する</td>
</tr>
<tr>
<td>--name-status</td>
<td>変更したファイルを表示する</td>
</tr>
<tr>
<td>-- path/to/*.txt</td>
<td>特定のファイルの履歴を表示する</td>
</tr>
<tr>
<td>--author='xxx'</td>
<td>コミットしたユーザー「xxx」で絞り込み表示する</td>
</tr>
</tbody>
</table>
<p>また，表示形式を指定することが可能である。</p>
<pre><code>git log --oneline --graph --decorate
</code></pre>
<p>とすることで見やすく表示することが可能である。</p>
<h2 id="変更作業のやり直し">変更作業のやり直し</h2>
<pre><code>git reset HEAD sample.txt
</code></pre>
<p>これでsample.txtのステージ済みの状態を取り消した。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MavenでMybatisを使う際のjava.io.IOException: Could not find resource XXX.xmlについて]]></title>
        <id>https://zy080080.github.io/post/OUJh9scJm/</id>
        <link href="https://zy080080.github.io/post/OUJh9scJm/">
        </link>
        <updated>2020-09-17T07:59:22.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://zy080080.github.io//post-images/1600326566880.png" alt="" loading="lazy"></figure>
<p>開発環境はIntelliJ IDEAです。<br>
Mybatisを勉強し始めたところですが，簡単なselect ステートメントを実行すると，java.io.IOException: Could not find resource XXX.xmlという例外が発生しました。</p>
<p>その理由は，srcディレクトリの中のxmlファイルはコンパイルされないからです。<br>
xmlファイルをresourceディレクトリに入れれば解決できます。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[よく使われるストリームのまとめ]]></title>
        <id>https://zy080080.github.io/post/Sjm2Ui3GK/</id>
        <link href="https://zy080080.github.io/post/Sjm2Ui3GK/">
        </link>
        <updated>2020-07-21T13:20:46.000Z</updated>
        <content type="html"><![CDATA[<p>1.ファイルを操作するクラスやメソッドの活用方法<br>
Fileクラス：ファイルおよびディレクトリのパス名の抽象表現である。<br>
Fileクラスを用いたファイル操作やディレクトリ操作方法：<br>
boolean delete()：ファイルの削除。<br>
boolean renameTo(File dest)：ファイルの名前変更する。<br>
boolean exists()：ファイルの存在確認。<br>
String[] list()：ディレクトリ一覧を得る。<br>
File[] listFiles()：ディレクトリ一覧を得る。<br>
boolean mkdir()：指定したディレクトリを単独で作成する。<br>
boolean mkdirs()：ディレクトリが深い場合でも親ディレクトリを含めて作成する。<br>
String getAbsolutePath()：指定したファイルの絶対パスを取得する。<br>
String getPath()：ファイルの相対パスを取得する。</p>
<p>2.色々なストリーム：<br>
バイトストリーム：文字ではない単なるデータ（いわゆるバイナリデータ）を取り扱うためのもの<br>
InputStream：抽象クラスで、バイト入力ストリームを表現するすべてのクラスのスーパー・クラスである。<br>
メソッド：<br>
read()：この入力ストリームからデータのバイトを読み込む。<br>
read()：最大b.lengthバイトのデータを、この入力ストリームからバイト配列に読み込む。<br>
close()：最大b.lengthバイトのデータを、この入力ストリームからバイト配列に読み込む。<br>
よく使うサブクラス：<br>
FileInputStream：ファイル・システム内のファイルから入力バイトを取得するためのクラスである。イメージ・データなどのrawバイトのストリームを読み込むときに使用する。<br>
FileInputStreamのサブクラス：<br>
BufferedInputStream：ほかの入力ストリームに機能、特に入力をバッファに格納する機能とmarkおよびresetメソッドをサポートする機能を追加したクラスである。入力ストリームから必要に応じて一度に多数のバイトが内部バッファに補充される。<br>
DataInputStream：プリミティブ型のJavaデータをベースとなる入力ストリームからマシンに依存せずに読み込むときに使用する。</p>
<p>OutputStream：抽象クラスは、バイト出力ストリームを表現するすべてのクラスのスーパー・クラスである。<br>
よく使うメソッド：<br>
write(byte[] b)：指定されたバイト配列のb.lengthバイトをこの出力ストリームに書き込む。<br>
write(int b)：指定されたバイトをこの出力ストリームに書き込む。<br>
flush()：出力ストリームをフラッシュして、バッファリングされていたすべての出力バイトを強制的に書き込む。<br>
close()：出力ストリームを閉じ、このストリームに関連するすべてのシステム・リソースを解放する。<br>
よく使うサブクラス：<br>
FileOutputStream：FileまたはFileDescriptorにデータを書き込むための出力ストリームである。<br>
FileOutputStreamのサブクラス：<br>
BufferedOutputStream：バッファリングされた出力ストリームを実装したクラスである。<br>
PrintStream：<br>
ほかの出力ストリームに機能、具体的には、さまざまなデータ値の表現を簡易的に出力する機能を追加したクラスである。PrintStreamはほかの出力ストリームとは違って、IOExceptionをスローすることはない。<br>
printlnを呼び出すと，PrintStreamを自動的にフラッシュする。<br>
よく使うメソッド：<br>
さまざまなデータ値を出力するprint()，println()およびprintf()。<br>
close()：ストリームを閉じる。<br>
DataOutputStreamなど。</p>
<p>文字ストリーム：基本的にはテキストを取り扱うためのものである。<br>
Reader：文字ストリームを読み込むための抽象クラスである。<br>
よく使うサブクラス：<br>
InputStreamReader：バイト・ストリームから文字ストリームへの橋渡しの役目を持つ。バイトを読み込み、指定されたcharsetを使用して文字にデコードする。<br>
よく使うメソッド：<br>
read()：単一の文字を読み込む。<br>
close()：ストリームを閉じて、それに関連するすべてのシステム・リソースを解放する。<br>
よく使うサブクラス：<br>
FileReader：文字ファイルを読み込むための簡易クラスである。<br>
BufferedReader：文字、配列、行をバッファリングすることによって、文字型入力ストリームからテキストを効率良く読み込むクラスである。</p>
<p>Writer：文字ストリームに書き込むための抽象クラスである。<br>
OutputStreamWriter：FileまたはFileDescriptorにデータを書き込むための出力ストリームである。<br>
よく使うメソッド：<br>
write(String str, int off, int len)：文字列の一部を書き込む。<br>
write(char[] cbuf, int off, int len)：文字の配列の一部を書き込む。<br>
write(int c)：単一の文字を書き込む。<br>
close()：ストリームを最初にフラッシュして、閉じる。<br>
flush()：ストリームをフラッシュする。<br>
よく使うサブクラス：<br>
FileWriter：文字ファイルを書き込むための簡易クラスである。<br>
PrintWriter：<br>
オブジェクトの書式付き表現をテキスト出力ストリームに出力するクラスである。<br>
このクラスは、PrintStreamで見つかったすべてのprintメソッドを実装する。<br>
ただし、rawバイトを書き込むメソッドは含まれない。<br>
PrintStreamクラスとは異なり、自動フラッシュが有効な場合は、改行文字が出力されるときではなく、println、printf、またはformatのいずれかのメソッドが呼び出されたときにのみ実行される。<br>
よく使うメソッド：<br>
さまざまなデータ値を出力するprint()，println()およびprintf()。これらのメソッドは、改行文字ではなく、プラットフォームに固有の行区切りの表記を使用する。<br>
close()：ストリームを閉じる。<br>
BufferedWriter：文字をバッファリングすることによって、文字、配列、または文字列を効率良く文字型出力ストリームに書き込むクラスである。</p>
<p>3.文字ストリームとバイトストリームの違い<br>
ストリームとは，連続したデータの流れを抽象化したものである。<br>
文字ストリームとは，テキストを取り扱うための，16ビット単位（文字リテラル）で入出力するストリームである。<br>
バイトストリームとは，バイナリデータを取り扱うための，最小単位8ビット単位で入出力するストリームである。<br>
文字ストリームを使用すれば，文字コードに依存しないプログラムを作成可能になる。入力・出力の文字コードに関わらず，Java内部ではUnicodeに変換される。</p>
<p>4.バッファリング<br>
データを二次記憶装置から一時記憶装置にまとめて読み込む処理である。</p>
<p>5.ファイルの最後に書き込みたい場合<br>
FileWriterはFileWriter(File file, boolean append)というコンストラクタを持つ。appendがtrueの場合，バイトはファイルの先頭ではなく最後に書き込まれる。<br>
PrintWriterのコンストラクタに渡せる変数は，File，String，Writer，OutputStreamである。つまり，全てのprintメソッドとファイルの最後に書きたい場合，PrintWriter(new FileWriter(File,true))を使えばよい。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[About protected]]></title>
        <id>https://zy080080.github.io/post/nj0dzADHm/</id>
        <link href="https://zy080080.github.io/post/nj0dzADHm/">
        </link>
        <updated>2020-05-08T09:17:56.000Z</updated>
        <summary type="html"><![CDATA[<p>protected variable is a bit interesting in Java</p>
]]></summary>
        <content type="html"><![CDATA[<p>protected variable is a bit interesting in Java</p>
<!-- more -->
<p>Quoted from Core Java 9th Edition</p>
<blockquote>
<p>However, the Manager class methods can peek inside the hireDay field of Manager objects only, not of other Employee objects. This restriction is made so that you can’t abuse the protected mechanism by forming subclasses just to gain access to the protected fields</p>
</blockquote>
<p>Quoted from &quot;Thinking in Java&quot; Fourth Edition p180:</p>
<blockquote>
<p>In an ideal world, the private keyword would be enough. In real projects, there are times when you want to make something hidden from the world at large and yet allow access for members of derived classes.</p>
<p>The protected keyword is a nod to pragmatism. It says “This is private as far as the class user is concerned, but available to anyone who inherits from this class or anyone else in the same package.” (In Java, protected also provides package access.)</p>
<p>Although it’s possible to create protected fields, the best approach is to leave the fields private; you should always preserve your right to change the underlying implementation. You can then allow controlled access to inheritors of your class through protected methods</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java基礎まとめ・２]]></title>
        <id>https://zy080080.github.io/post/VSrq0PRIu/</id>
        <link href="https://zy080080.github.io/post/VSrq0PRIu/">
        </link>
        <updated>2020-04-17T10:32:02.000Z</updated>
        <content type="html"><![CDATA[<p><a href="#cn">跳转至中文内容</a></p>
<h1 id="java基礎-4~10">Java基礎　4~10</h1>
<h2 id="4oracle-jdk-と-openjdk">4.Oracle JDK と OpenJDK</h2>
<p>略</p>
<h2 id="5javaとcの比較">5.JavaとC++の比較</h2>
<ul>
<li>どっちもオブジェクト指向言語。カプセル化，継承，多態性。</li>
<li>C++ではポインタを使ってメモリアドレスを直接操作できる。Javaはメモリアドレスを直接操作できるポインタを持っていない。C++ではポインタへのポインタを定義できるが，Javaではオブジェクトアクセスにだけ参照を用いる。</li>
<li>C++は任意のクラスの多重継承をサポートする。Javaは肩の多重継承をインタフェースよりサポートするが，実装は単一検証のみをサポートする。Javaのクラスは複数のインタフェースを実装することができす。</li>
<li>Javaは自動ガベージコレクションを必要とする。C++のメモリ管理は普通，手動で行われるか，スマートポインタを通して行われる。</li>
</ul>
<h2 id="6アプリケーションのmainクラスとアプレットのmainクラス">6.アプリケーションのmainクラスとアプレットのmainクラス</h2>
<p>一つのアプリケーションには複数のクラスが存在しえるが，mainクラスは一つしか存在しない。Javaアプリケーションでは，mainクラスとはmain()メソッドのあるクラスです。<br>
アプレットでは，mainクラスはJAppletまたはAppletから継承したクラスです。<br>
アプリケーションのmainクラスはpublicでなくてもよいが，アプレットのmainクラスはpublicに限る。</p>
<h2 id="7javaアプリケーションとjavaアプレット">7.JavaアプリケーションとJavaアプレット</h2>
<p>Javaプログラムは，mainメソッドから開始される。<br>
アプレットには，mainメソッドが存在しない，WEBページに組み込んで実行される（init()またはrun()から）。</p>
<h2 id="8文字型変数と文字列">8.文字型変数と文字列</h2>
<ul>
<li>文字型は''で囲んだ一つの文字（2Byte），文字列は&quot;&quot;で囲んだ複数の文字。</li>
<li>文字型変数は符号なし整数に当たり，演算子を使って数値の計算ができる。文字列は参照型なので一つのメモリアドレスに当たり，＋で連結することができる。</li>
</ul>
<h2 id="9コンストラクタはoverrideできるか">9.コンストラクタはoverrideできるか</h2>
<p>Constructorはoverrideできないが，overloadできる。なので複数のConstructorが存在し得る。</p>
<h2 id="10override-と-overload">10.Override と Overload</h2>
<p>Overrideとは，継承した親クラスのメソッドの内容を子クラスで再定義すること。</p>
<p>Overloadとは，引数の数、型、順番を変えることで同一クラスに同名メソッドを複数定義する機能。</p>
<hr>
<p><a name="cn"></a></p>
<h1 id="java基础-4~10">Java基础 4~10</h1>
<h2 id="4oracle-jdk-和-openjdk-的对比">4.Oracle JDK 和 OpenJDK 的对比</h2>
<p>略</p>
<h2 id="5java和c的区别">5.Java和C++的区别</h2>
<ul>
<li>都是面向对象的语言，都支持封装、继承和多态。</li>
<li>Java不提供指针来直接访问内存，程序内存更加安全。</li>
<li>Java的类是单继承的，C++支持多重继承；虽然Java的类不可以多继承，但是接口可以多继承。</li>
<li>Java有自动内存管理机制，不需要手动释放无用内存。</li>
</ul>
<h2 id="6什么是java程序的主类应用程序和小程序的主类有何不同">6.什么是Java程序的主类，应用程序和小程序的主类有何不同</h2>
<p>一个程序中可以有多个类，但只能有一个类是主类。在Java应用程序中，这个主类是指包含main()方法的类。而在Java小程序中，这个主类是一个继承自系统类JApplet或Applet的子类。应用程序的主类不一定要求是public类，但小程序的主类要求必须是public类。主类是Java程序执行的入口点。</p>
<h2 id="7java应用程序与小程序之间有哪些差别">7.Java应用程序与小程序之间有哪些差别</h2>
<p>简单说应用程序是从主线程启动（也就是main()方法）。applet小程序没有main方法，主要是嵌在浏览器页面上运行（调用init()或run()来启动），嵌入浏览器这点跟flash的小游戏类似。</p>
<h2 id="8字符型常量和字符串常量的区别">8.字符型常量和字符串常量的区别</h2>
<ul>
<li>形式上：字符常量是单引号引起的一个字符；字符串常量是双引号引起的若干个字符。</li>
<li>含以上：字符常量相当于一个整型值（ASCII值），可以参加表达式运算；字符串常量代表一个地址值（该字符串在内存中存放位置）。</li>
<li>占内存大小：字符常量只占2个字节；字符串常量占若干个字节。</li>
</ul>
<h2 id="9构造器constructor是否可被override">9.构造器Constructor是否可被override</h2>
<p>Constructor不能被override（重写），但是可以overload（重载），所以你可以看到一个类中有多个构造器函数的情况。</p>
<h2 id="10重载和重写的区别">10.重载和重写的区别</h2>
<h3 id="重载">重载</h3>
<p>发生在同一个类中，方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同。</p>
<h3 id="重写">重写</h3>
<p>重写是子类对父类的允许访问的方法的实现过程进行重新编写，发生在子类中，方法名、参数列表必须相同，返回值范围小于等于父类，访问修饰符范围大于等于父类。另外，如果父类方法访问修饰符为private则子类就不能重写该方法。<strong>也就是说方法提供的行为发生改变，而方法的外貌并没有改变</strong>。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to start Tomcat with output on console in Linux?]]></title>
        <id>https://zy080080.github.io/post/pKZECUQCU/</id>
        <link href="https://zy080080.github.io/post/pKZECUQCU/">
        </link>
        <updated>2020-03-20T08:34:49.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://stackoverflow.com/questions/14010448/how-to-start-tomcat-with-output-on-console-in-linux">source: How to start Tomcat with output on console in Linux? [closed]<br>
</a></p>
<p>You're looking for</p>
<pre><code>tomcat/bin/catalina.sh run
</code></pre>
<p>instead of</p>
<pre><code>tomcat/bin/startup.sh; tail -f tomcat/logs/catalina.out
</code></pre>
<p>Tomcat stays in foreground this way (first option). If you want to shut it down, Ctrl-C in your console window will do the trick.</p>
<p>If you choose the second option, tomcat will run in background, while tail will run in foreground, but you'll have to give the same directory path twice.</p>
]]></content>
    </entry>
</feed>