<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zy080080.github.io/</id>
    <title>听故事的人</title>
    <updated>2019-09-10T00:37:56.160Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zy080080.github.io/"/>
    <link rel="self" href="https://zy080080.github.io//atom.xml"/>
    <subtitle>天青色等烟雨，而我在等你</subtitle>
    <logo>https://zy080080.github.io//images/avatar.png</logo>
    <icon>https://zy080080.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, 听故事的人</rights>
    <entry>
        <title type="html"><![CDATA[汇编语言笔记（第二章）]]></title>
        <id>https://zy080080.github.io//post/hui-bian-yu-yan-bi-ji-di-er-zhang</id>
        <link href="https://zy080080.github.io//post/hui-bian-yu-yan-bi-ji-di-er-zhang">
        </link>
        <updated>2019-09-10T04:07:01.000Z</updated>
        <summary type="html"><![CDATA[<p>汇编语言（第三版） 王爽著 清华大学出版社</p>
]]></summary>
        <content type="html"><![CDATA[<p>汇编语言（第三版） 王爽著 清华大学出版社</p>
<!-- more -->
<h1 id="第二章-寄存器">第二章 寄存器</h1>
<p> 一个典型的CPU由运算器、控制器、寄存器（CPU工作原理）等器件构成，这些器件靠内部总线相连，前一章的总栈相对于CPU内部来说是外部总线。内部总线实现CPU内部各个器件之间的联系，外部总线实现CPU和主板上其他器件的联系。在CPU中：</p>
<ul>
<li>运算器进行信息处理；</li>
<li>寄存器进行信息储存；</li>
<li>控制器控制各种器件进行工作；</li>
<li>内部总栈链接各种器件，在他们之间进行数据的传送。</li>
</ul>
<p> 对于一个汇编程序员来说，CPU中的主要部件是寄存器。寄存器是CPU中程序员可以用指令读写的部件。通过改变各种寄存器中的内容来实现对CPU的控制。</p>
<h2 id="21-通用寄存器">2.1 通用寄存器</h2>
<p> 8086CPU的所有寄存器都是16位的，可以存放两个字节。AX、BX、CX、DX这四个寄存器通常用来存放一般性的数据，被称为通用寄存器。<br>
 8086CPU的上一代CPU中的寄存器都是8位的，为了保证兼容，使原来基于上代CPU编写的程序稍加修改就可以运行在8086上，8086CPU的AX、BX、CX、DX这四个寄存器都可以分为两个可独立使用的8位寄存器来用：</p>
<ul>
<li>AX可分为AH和AL；</li>
<li>BX可分为BH和BL；</li>
<li>CX可分为CH和CL；</li>
<li>DX可分为DH和DL。</li>
</ul>
<p> AX的低8位（0位<sub>7位）构成了AL寄存器，高8位（8位</sub>15位）构成了AH寄存器。</p>
<blockquote>
<p>图例见教材P15。</p>
</blockquote>
<h2 id="22-字在寄存器中的储存">2.2 字在寄存器中的储存</h2>
<p> 出于对兼容性的考虑，8086CPU可以一次性处理一下两种尺寸的数据：</p>
<ul>
<li>字节：记为byte，一个字节由8个bit组成，可以存在8位寄存器中。</li>
<li>字：记为word，一个字由两个字节组成，这两个字节分别称为这个字的高位字节和低位字节。</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">01001110</th>
<th style="text-align:center">00100000</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">高位字节</td>
<td style="text-align:center">低位字节</td>
</tr>
</tbody>
</table>
<h2 id="23-几条汇编指令">2.3 几条汇编指令</h2>
<table>
<thead>
<tr>
<th style="text-align:left">汇编指令</th>
<th style="text-align:left">控制CPU完成的操作</th>
<th style="text-align:left">用高级语言的语法描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">mov ax,18</td>
<td style="text-align:left">将18送入寄存器AX</td>
<td style="text-align:left">AX=18</td>
</tr>
<tr>
<td style="text-align:left">mov ah,78</td>
<td style="text-align:left">将78送入寄存器AH</td>
<td style="text-align:left">AH=78</td>
</tr>
<tr>
<td style="text-align:left">add ax,8</td>
<td style="text-align:left">将寄存器AX中的数值加上8</td>
<td style="text-align:left">AX=AX+8</td>
</tr>
<tr>
<td style="text-align:left">mov ax,bx</td>
<td style="text-align:left">将寄存器BX中的数据送入寄存器AX</td>
<td style="text-align:left">AX=BX</td>
</tr>
<tr>
<td style="text-align:left">add ax bx</td>
<td style="text-align:left">将AX和BX中的数值相加，结果存在AX中</td>
<td style="text-align:left">AX=AX+BX</td>
</tr>
</tbody>
</table>
<h2 id="24-物理地址">2.4 物理地址</h2>
<p> CPU访问内存单元时，要给出内存单元的地址。所有的内存单元构成的储存空间是一个一维的线性空间，每一个内存单元在这个空间都有唯一的地址，我们将其称为物理地址。<br>
 CPU通过地址总线送入存储器的，必须是一个内存单元的物理地址。在CPU向地址总线上发出物理地址之前，必须要在内部先形成这个物理地址。不同的CPU有不同的形成物理地址的方式。在此我们讨论8086CPU。</p>
<h2 id="25-16位结构的cpu">2.5 16位结构的CPU</h2>
<p> 概括地讲，16位结构（16位机，字长为16位等常见说法，与16位结构的含义相同）描述了一个CPU具有下面几方面的结构特性。</p>
<ul>
<li>运算器一次最多可处理16位的数据；</li>
<li>寄存器的最大宽度位16位；</li>
<li>寄存器和运算器之间的通路位16位。<br>
 8086是16位结构的CPU，也就是说，在8086内部，能够一次性处理、传输、暂时储存的信息的最大长度是16位的。内存单元的地址在送上地址总线之前，必须在CPU中处理、传输、暂时存放，对于16位CPU，能一次性处理、传输、暂时存储16位的地址。</li>
</ul>
<h2 id="26-8086cpu给出物理地址的方法">2.6 8086CPU给出物理地址的方法</h2>
<p> 8086CPU有20位地址总线，可以传送20位地址，达到1MB寻址能力。8086CPU又是16位结构，在内部一次性处理、船速、暂时储存的地址为16位。从8086CPU的内部结构来看，如果将地址从内部简单的发出，那么它只能送出16位的地址，表现出的寻址能力只有64KB。<br>
 8086CPU采用一中在内部用两个16位地址合成的方法来形成一个20位的物理地址。当8086CPU要读写内存时：</p>
<ol>
<li>CPU中的相关部件提供两个16位的地址，一个称为段地址，另一个称为偏移地址；</li>
<li>段地址和偏移地址通过内部总线送入一个称为地址加法器的部件；</li>
<li>地址加法器将两个16位地址合成为一个20位的物理地址；</li>
<li>地址加法器通过<mark>内部总线</mark>将20位物理地址送入输入输出控制电路；</li>
<li>输入输出控制电路将20位物理地址送上地址总线；</li>
<li>20位物理地址被地址总线传送到存储器（内存）。</li>
</ol>
<p> 地址加法器采用<strong>物理地址=段地址x16+偏移地址</strong>的方式用段地址和偏移地址合成物理地址。</p>
<blockquote>
<h3 id="由-段地址x16-引发的讨论">由 段地址x16 引发的讨论</h3>
<p> “段地址x16”有一个更为常用的说法是左移4位。计算机中的所有信息都是以二进制的形式存储的，段地址也不例外。机器智能处理而禁止信息，”左移4位“中的位，指的是二进制位<br>
 一个X进制的数据左移1位，相当于乘以X。</p>
</blockquote>
<h2 id="27-段地址x16偏移地址物理地址的本质含义">2.7 “段地址x16+偏移地址=物理地址”的本质含义</h2>
<p> “段地址x16+偏移地址=物理地址”的本质含义是：CPU在访问内存时，用一个基础地质（段地址x16）和一个相对与基础地址的偏移地址相加，给出内存单元的物理地址。<br>
 更一般地说，8086CPU这种寻址功能是“基础地质+偏移地址=-物理地址”寻址模式的一种具体实现方案。<br>
 下面比喻说明。<br>
 比如说，学校、体育馆、图书馆在一条笔直的单行路上，学校位于路的起点。</p>
<table>
<thead>
<tr>
<th>学校</th>
<th></th>
<th>体育馆</th>
<th></th>
<th>图书馆</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>2 0 0 0 米</td>
<td></td>
<td>8 2 6 米</td>
<td>2826米</td>
</tr>
</tbody>
</table>
<p> 你要去图书馆，问我那里的地址，我可以用两种方式告诉你图书馆的地址：</p>
<ol>
<li>从学校走2826m到图书馆。这2826m可以认为是图书馆的物理地址。</li>
<li>从学校走2000m到体育馆，从体育馆再走826m到图书馆。第一个距离2000m是相当于起点的基础地址，第二个距离826m是相对于基础地址的偏移地址（以基础地址为起点的地址）。</li>
</ol>
<p> 第一种方式直接给出物理地址2826m，第二种方式使用基础地址和偏移地址相加来得到物理地址的。<br>
 我们为上面的例子加一些限制条件，比如只能通过纸条来互相通信，如果我有一张可以容纳4位数据的纸条，我可以写下2826这个数据。</p>
<table>
<thead>
<tr>
<th>2</th>
<th>8</th>
<th>2</th>
<th>6</th>
</tr>
</thead>
<tbody></tbody>
</table>
<p> 可不巧的是我仅有两张可以容纳三位数据的纸条。这样我只能通过这总方式来传达数据。</p>
<table>
<thead>
<tr>
<th>2</th>
<th>0</th>
<th>0</th>
</tr>
</thead>
<tbody>
<tr>
<td>8</td>
<td>2</td>
<td>6</td>
</tr>
</tbody>
</table>
<p> 假设我们事先约定，得到两张之后做这样的运算：</p>
<ul>
<li>200（段地址）x10 + 826（偏移地址） = 2826（物理地址）</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[The way to make sure never to draw a number twice]]></title>
        <id>https://zy080080.github.io//post/the-way-to-make-sure-never-to-draw-a-number-twice</id>
        <link href="https://zy080080.github.io//post/the-way-to-make-sure-never-to-draw-a-number-twice">
        </link>
        <updated>2019-09-09T16:02:54.000Z</updated>
        <summary type="html"><![CDATA[<p> When we draw k numbers from numbers[n], how to be sure never to draw a number again?</p>
]]></summary>
        <content type="html"><![CDATA[<p> When we draw k numbers from numbers[n], how to be sure never to draw a number again?</p>
 <!-- more --> 
<p> This program draws a random combination of numbers for a lottery game.<br>
 The way to draw a number just once is :</p>
<blockquote>
<p> To overwrite numbers[r] with the last number in the array and reduce n by 1.</p>
</blockquote>
<p> 将原本number[r]的元素移除后，通过n每次的缩小随机数产生的范围避免重复。</p>
<pre><code>import java.util.*;

public class LotteryDrawing {
	public static void main (String[] args) {
		Scanner in = new Scanner(System.in);
	
		System.out.print(&quot;How many numbers do you need to draw? &quot;);
		int k = in.nextInt();
	
		System.out.print(&quot;What is the highest numbers you can draw? &quot;);
		int n = in.nextInt();
	
		//fill an arry with numbers 1 2 3. . .n
		int[] numbers = new int[n];
		for(int i = 0; i &lt; numbers.length; i++) {
			numbers[i] = i + 1;
		}
		
		//draw k numbers and put them into a second array
		int[] result = new int[k];
		for(int i = 0; i &lt; result.length; i++) {
			//make a random index between 0 and n - 1
			int r = (int)(Math.random() * n);
			
			//pick the element at the random location
			result[i] = numbers[r];
			
			//move the last element into the random location
			numbers[r] = numbers[n - 1];
			n--;
		}
	
		//print the sorted array
		Arrays.sort(result);
		System.out.println(&quot;Bet the following combination. It'll make you rich!&quot;);
		for(int r : result) {
			System.out.print(r + &quot; &quot;);
		}
	}
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[汇编语言笔记（第一章）]]></title>
        <id>https://zy080080.github.io//post/hui-bian-yu-yan-bi-ji</id>
        <link href="https://zy080080.github.io//post/hui-bian-yu-yan-bi-ji">
        </link>
        <updated>2019-09-09T03:28:56.000Z</updated>
        <summary type="html"><![CDATA[<p>汇编语言（第三版） 王爽著 清华大学出版社</p>
]]></summary>
        <content type="html"><![CDATA[<p>汇编语言（第三版） 王爽著 清华大学出版社</p>
<!-- more -->
<h1 id="第一章">第一章</h1>
<h2 id="1基础知识">1.基础知识</h2>
<h3 id="11-机器语言">1.1 机器语言</h3>
<ul>
<li>电子计算机的机器指令是一列二进制数字。计算机将之转变为一列高低电平，以使计算机的电子器件受到驱动，进行运算。</li>
<li>现在我们常用的PC机中，有一个芯片来完成上面所说的计算机的功能。这个芯片是CPU（Central Processing Unit），是一种微型处理器。</li>
</ul>
<h3 id="14-储存器">1.4 储存器</h3>
<ul>
<li>要想让一个CPU工作，就必须向它提供指令和数据。指令和数据在储存器中存放，也就是我们平时所说的内存。</li>
<li>磁盘不同于内存，磁盘上的数据或程序如果不读到内存中，就无法被CPU使用。</li>
</ul>
<h3 id="16-储存单元">1.6 储存单元</h3>
<ul>
<li>储存器被划分成若干个储存单元，每个储存单元从0开始顺序编号，例如一个储存器有128个储存单元，编号从0~127。</li>
<li><strong>微型机储存器的储存单元可以储存一个Byte</strong>，即8个二进制单位（bit）。一个储存器有128个储存单元，它可以储存128个Byte。</li>
<li>微机储存器的容量是以字节为最小单位来计算的。对于拥有128个储存单元的储存器，我们可以说，它的容量是128个字节。</li>
</ul>
<h3 id="17-cpu对储存器的读写">1.7 CPU对储存器的读写</h3>
<ul>
<li>CPU想要进行数据的读写，必须和外部器件（标准的说法是芯片）进行下面三类信息的交互。
<ul>
<li>储存单元的地址（地址信息）。</li>
<li>器件的选择，读说写的命令（控制信息）。</li>
<li>读或写的数据（数据信息）。</li>
</ul>
</li>
<li>地址总线、数据总线和控制总线。
<ul>
<li>地址总线的宽度决定了CPU的寻地址能力，一个CPU有N根地址总线，则可以说这个CPU的地址总线跨度为N。这样的CPU最多可以寻找2的N次方个内存单元。</li>
<li>数据总线的宽度决定了CPU与其他器件进行数据传送时的一次数据传送量，决定了CPU和外接的数据传送速度。8根数据总线一次可以传送一个8位二进制数据（即一个字节）。16根数据总线一次可以传送两个字节。</li>
<li>控制总线的宽度决定了CPU对系统中其他器件的控制能力。有多少根控制总线，就意味着CPU提供了对外部器件的多少种控制。</li>
</ul>
</li>
</ul>
<blockquote>
<h4 id="检测点11">检测点1.1</h4>
<p>1个CPU的寻地址能力是8KB，那么他的地址总线的宽度为<u>13</u>。（以二为底的log(8*1024)）<br>
可寻址2^10个内存单元 = 2^10 Byte内存单元。<br>
2^20 个不同的数据 = (2^20)/1024 = 1024KB 不同数据 = 1MB不同数据。</p>
</blockquote>
<h3 id="114-各类储存器芯片">1.14 各类储存器芯片</h3>
<ul>
<li>随机储存器（RAM），可读可写但必须带电储存，关机后储存的内容消失。<br>
用于存放供CPU使用的决大份程序个数据，主随机储存器一般由两个位置上的RAM组成，装在主板上的RAM和插在扩展插槽上的RAM。</li>
<li>装有BIOS（Basic Input/Output System，基本输入/输出系统）的ROM。<br>
BIOS是由主板和各类接口卡（显卡网卡等）厂商提供的软件系统，可以通过它利用该硬件设备进行最基本的输入输出。<br>
在主板和某些接口卡上插有储存相应BIOS的ROM。例如，主板上的ROM中分储存着主板的BIOS（通常称为系统BIOS）；显卡上的ROM中储存着显卡的BIOS。</li>
<li>接口卡上的RAM。<br>
某些接口卡需要对大批量输入、输出数据进行暂时储存，在其上装有RAM。最典型的是显示卡上的RAM，一般称为显存。显示卡随时将显存中的数据向显示器上输出。</li>
</ul>
<h3 id="115-内存地址空间">1.15 内存地址空间</h3>
<p> 上述的那些储存器，在物理上是独立的器件，但是在以下两点上相同：</p>
<ul>
<li>都和CPU的总线相连。</li>
<li>CPU对他们进行读或写的时候都通过控制总线发出内存读写命令。</li>
</ul>
<p> 所有的物理储存器被看作一个由若干储存单元组成的逻辑储存器，每个物理储存器在这个逻辑储存器中占有一个地址段，即一段地址空间。CPU在这段地址空间中读写数据，实际上就是在相对应的物理储存器中读写数据。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java time !]]></title>
        <id>https://zy080080.github.io//post/java-time</id>
        <link href="https://zy080080.github.io//post/java-time">
        </link>
        <updated>2019-08-23T17:21:07.000Z</updated>
        <summary type="html"><![CDATA[<p>  It's time to learn something in English.</p>
]]></summary>
        <content type="html"><![CDATA[<p>  It's time to learn something in English.</p>
<!-- more --> 
<p>  These days, I'm learning Java by watching videoes. Though I'd been learning Java for half a year, but meanwhile I was preparing my college entrance exam. so I could not concentrate on programming. I think it is necessary to have a review because in next term I'm going to attend Java class which is taught in Japanese.<br>
  It's kind of a difficult stuff that learning something in three languages. I'm trying to review what I have learned by using a book called 'Head First Java', the English version.</p>
<hr>
<br>
<p><img src="https://zy080080.github.io//post-images/1566570199123.png" alt=""><br>
 整个暑假都在折腾英语和Java了....最近打算把汇编的书看一看，提前预习免得下学期忙不过来</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[My First Personal Blog]]></title>
        <id>https://zy080080.github.io//post/my-first-personal-blog</id>
        <link href="https://zy080080.github.io//post/my-first-personal-blog">
        </link>
        <updated>2019-08-22T11:06:53.000Z</updated>
        <summary type="html"><![CDATA[<p> I watched a video on bilibili in which the author suggests that people who want to work at an IT company should start a blog. So I took whole day to figure out how to create a blog in github.</p>
]]></summary>
        <content type="html"><![CDATA[<p> I watched a video on bilibili in which the author suggests that people who want to work at an IT company should start a blog. So I took whole day to figure out how to create a blog in github.</p>
<!-- more --> 
<p> This is the first article I have written to celebrate the opening of my personal blog which at last ran successfully in 20190821. I'm going to use it as a technology blog and put any note on it which is important in programming or anything else computer involved.<br>
 I'll try my best to write articles in English. I hope this is a good challenge and a good chance to prove my proficiency in English.<br>
 Never Stop Learning.<br>
 厚积薄发。</p>
]]></content>
    </entry>
</feed>